{"version":3,"sources":["app.ts"],"names":[],"mappings":";;AAAA,iCAAiC;AAEjC,iDAAwF;AAExF,wDAAqD;AACrD,oDAAiD;AACjD,8DAA2D;AAG3D,MAAM,KAAK,GAAG,IAAI,CAAC;AAEnB,uBACC,SAAQ,+BAAe;IAEvB,YAAY,OAAe;QAC1B,KAAK,CAAC,OAAO,EAAE;YACd,WAAW,EAAE,IAAI;YACjB,OAAO;YACP,QAAQ,EAAE,KAAK;YACf,UAAU;YAEV;;uBAEW;SACX,CAAC,CAAC;QAEH,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACX,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;QACvC,CAAC;IACF,CAAC;IAGD;;OAEG;IACI,OAAO;QACb,MAAM,CAAC,KAAK,CAAC;IACd,CAAC;IAED;;OAEG;IACI,gBAAgB;QACtB,MAAM,CAAgB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACpD,CAAC;IAED;;OAEG;IACI,kBAAkB;QACxB,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,8CAA8C,CAAC,CAAC;IACnE,CAAC;IAEM,cAAc;QACpB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAChC,IAAI,CAAC,gBAAgB,EAAE,CAAC,MAAM,EAC9B;YACC,KAAK,EAAE,cAAc;YACrB,WAAW,EAAE,eAAe;YAC5B,UAAU,EAAE,CAAC,eAAe,CAAC;SAC7B,CAAC,CAAC;IACL,CAAC;IAGD;;OAEG;IACO,SAAS;QAClB,IAAI,CAAC,SAAS,CAAC,IAAI,6BAAa,CAAC,SAAS,CAAC,CAAC,CAAC;QAC7C,IAAI,CAAC,SAAS,CAAC,IAAI,yBAAW,CAAC,OAAO,CAAC,CAAC,CAAC;QAEzC,IAAI,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,EAC1C,CAAC,GAAG,CAAC,EACL,CAAC,GAAG,CAAC,CAAC;QAEP,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC;YACnB,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;YAC7B,CAAC,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC9B,CAAC;QACD,IAAI,CAAC,SAAS,CAAC,IAAI,mCAAgB,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1D,CAAC;CACD;AAtED,8CAsEC","file":"app.js","sourcesContent":["import * as eltr from 'electron';\r\n\r\nimport { ElectronAppBase, ElectronAppOptions, ElectronWindowBase } from 'electron-base';\r\n\r\nimport { DefaultWindow } from './main/DefaultWindow';\r\nimport { SlaveWindow } from './main/SlaveWindow';\r\nimport { StandaloneWindow } from './main/StandaloneWindow';\r\n\r\n\r\nconst DEBUG = true;\r\n\r\nexport class ElectronSampleApp \r\n\textends ElectronAppBase {\r\n\r\n\tconstructor(appRoot: string) {\r\n\t\tsuper(appRoot, {\r\n\t\t\tglobalClose: true,\r\n\t\t\t//* DEV\r\n\t\t\tpackMode: false\r\n\t\t\t/* /DEV */\r\n\r\n\t\t\t/*/ PROD\r\n\t\t\tpackMode: true\r\n\t\t\t/* /PROD */\r\n\t\t});\r\n\r\n\t\tif (DEBUG) {\r\n\t\t\tthis.logger.info('Debug mode is ON.');\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tpublic isDebug(): boolean {\r\n\t\treturn DEBUG;\r\n\t}\r\n\r\n\t/**\r\n\t * Public method must always have JSDoc comment.\r\n\t */\r\n\tpublic getDefaultWindow(): DefaultWindow {\r\n\t\treturn <DefaultWindow>this._windows.get('Default');\r\n\t}\r\n\r\n\t/**\r\n\t * Public method must always have JSDoc comment.\r\n\t */\r\n\tpublic doSomethingSpecial(): void {\r\n\t\tthis.logger.debug('Only I have this method, my parent does not!');\r\n\t}\r\n\r\n\tpublic showOpenDialog(): any {\r\n\t\treturn eltr.dialog.showOpenDialog(\r\n\t\t\tthis.getDefaultWindow().native,\r\n\t\t\t{\r\n\t\t\t\ttitle: 'Custom title',\r\n\t\t\t\tbuttonLabel: 'Custom action',\r\n\t\t\t\tproperties: ['openDirectory']\r\n\t\t\t});\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * @override\r\n\t */\r\n\tprotected onStarted(): void {\r\n\t\tthis.addWindow(new DefaultWindow('Default'));\r\n\t\tthis.addWindow(new SlaveWindow('Slave'));\r\n\r\n\t\tlet secondDisplay = this.getSecondDisplay(),\r\n\t\t\tx = 0,\r\n\t\t\ty = 0;\r\n\r\n\t\tif (secondDisplay) {\r\n\t\t\tx = secondDisplay.workArea.x;\r\n\t\t\ty = secondDisplay.workArea.y;\r\n\t\t}\r\n\t\tthis.addWindow(new StandaloneWindow('Standalone', x, y));\r\n\t}\r\n}"]}